run:
  timeout: 5m
  go: "1.21"

linters:
  enable:
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - cyclop
    - dupl
    - durationcheck
    - errname
    - errorlint
    - execinquery
    - exhaustive
    - exportloopref
    - forbidigo
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - goimports
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - lll
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - noctx
    - nolintlint
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    - sqlclosecheck
    - stylecheck
    - tenv
    - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - usestdlibvars
    - wastedassign
    - whitespace

linters-settings:
  funlen:
    lines: 100
    statements: 50
  
  cyclop:
    max-complexity: 15
  
  lll:
    line-length: 120
  
  gomnd:
    settings:
      mnd:
        checks: argument,case,condition,operation,return,assign

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - hugeParam

issues:
  exclude-rules:
    # Exclude magic number checks for HTTP status codes
    - path: cuserr\.constants\.errors\.go
      linters:
        - gomnd
    
    # Exclude magic number checks for test files  
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - gocognit
        - dupl
    
    # Exclude some linters for examples
    - path: examples/
      linters:
        - gochecknoglobals
        - gochecknoinits
        - funlen
        - gomnd
        - lll

  exclude-use-default: false
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)
    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop
    # gosec: Too many false-positives on 'unsafe' usage
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
    # gosec: Too many false-positives for parametrized shell calls
    - (Subprocess launch(ed with variable|ing should be audited)|G204)
    # gosec: Disable warnings about sha1, we need it for git
    - (Use of weak cryptographic primitive|G401)

severity:
  default-severity: error